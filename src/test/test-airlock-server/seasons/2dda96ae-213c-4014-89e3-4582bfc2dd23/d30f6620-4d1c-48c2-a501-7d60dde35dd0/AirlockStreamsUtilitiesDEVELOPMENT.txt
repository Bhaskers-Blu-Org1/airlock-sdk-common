function printRed(){
	return "red";
}

function printBlue(){
	return "blue";
}

function printCounter(numViews){
	if ((typeof(numViews) !== "undefined")  || ( numViews !== undefined)){
		str1 = "The number of views is: " + numViews
		return str1;
	}
	else {
		return "No Views";
	}
}
MAX_ENTERIES_COUNT = 200;
enteriesArr = Array.apply(undefined,Array(MAX_ENTERIES_COUNT));
nextIndex = 0;

function trace(message) {
    if (typeof message === "string" || message instanceof String) {
        enteriesArr[nextIndex] = message;
        if (++nextIndex >= MAX_ENTERIES_COUNT) {
            nextIndex = 0;
        }
    }
}

__getTrace = function() {

    var outArr = [];

    for (var i = nextIndex ; i < enteriesArr.length ; i++) {
        var msg = enteriesArr[i]; 
        if (msg != undefined) {
            outArr.push(msg); 
            enteriesArr[i] = undefined; 
        } 
    }

    for (var j = 0 ; j < nextIndex ; j++) {
        var msg = enteriesArr[j]; 
        if (msg != undefined) {
            outArr.push(msg); 
            enteriesArr[j] = undefined;
        } 
    }

    nextIndex = 0;
    return outArr;
}

// days between date2 to date1
function daysBetween (date1,date2) {

    var one_day=1000*60*60*24;
    var date1_ms = date1.getTime();
    var date2_ms = date2.getTime();
    var difference_ms = date2_ms - date1_ms;
    return Math.round(difference_ms/one_day); 
}

//  
function roundEventDateByDay(event) {
	var d = new Date(event.dateTime);
    var eventDay = new Date(Date.UTC(d.getFullYear(),d.getMonth(),d.getDate())).toJSON();
    return eventDay;
}

function countByDate(event,keyToCount,dateTable) {

    var eventDay = roundEventDateByDay(event);

    if (dateTable[eventDay] === undefined) {
		dateTable[eventDay] = {};
    }

    var dayTable = cache.dateTable[eventDay];
    
    if (dayTable[keyToCount] === undefined) {
		dayTable[keyToCount] = 1;
	} else {
		dayTable[keyToCount] += 1;
	}

    dateTable[eventDay] = dayTable;
}

function sumAndCleanLastDays(lastDaysToSum,dateTable) {
    
    var now = new Date();
    var daysArr = Object.keys(dateTable);
    var daysToRemove = [];
    var output = {};

    for (var day in daysArr) {
        var oneDay = daysArr[day];
        if (daysBetween(new Date(oneDay),now) < lastDaysToSum) {
            var oneDayVideoSum = dateTable[oneDay];
            var oneDayVideoSumArr = Object.keys(oneDayVideoSum);
            for (var c in oneDayVideoSumArr) {
                var cat = oneDayVideoSumArr[c];
    
                if (output[cat] === undefined) {
                    output[cat] = oneDayVideoSum[cat];
                } else {
                    output[cat] += oneDayVideoSum[cat];
                }
            }
        } else {
            daysToRemove.push(oneDay); 
        }
    }
    
    for (var i in daysToRemove) {
        delete dateTable[dayToRemove[i]];
    } 
    
    return output;
}

//reset the stream after x days from start date
function resetStreamAfterDays(startDate,resetAfterDaysNum) {
    
    var now = new Date();
    var daysDelta = daysBetween(startDate,now);
    
    trace("Reset Days After:" + resetAfterDaysNum  + "Days delta:" + daysDelta);
    
    if (daysDelta >= resetAfterDaysNum) {
        trace("reset stream");
        result = {};
        cache  = {};
    }  
}

// create the buckets
function createBucketPerSessions(buckets, allEvents){
    trace("createBucketPerSessions");
    for (var e in allEvents) {
        try{
            if (allEvents[e].name === "app-launch"){
                trace("event app launch");
                buckets.push({
                    date: allEvents[e].dateTime,
                    eventcount: 0
                });
            }
        }
        catch(err){
            trace(err.name + ":" + err.message);
        }
    }
    return buckets
}

// sort the events after the buckets
function sortEventsInBuckets(sessionBuckets, allEvents, eventName, eventDataName)
{
    trace("sortEventsInBuckets");
    var sortedEvents = sessionBuckets;
    for (var i in allEvents) {
        try{
            currentEventName = allEvents[i].name;
            try{
                if (allEvents[i].eventData.name === undefined){
                    currentEventDataName = null;
                }else{
                    currentEventDataName = allEvents[i].eventData.name;
                }
            }catch(err){
                trace("missing eventData.Name :" + err.name + ":" + err.message);
                currentEventDataName = null;
            }
            if ((eventName === null || eventName === undefined || currentEventName === eventName) && 
                (currentEventDataName === null || eventDataName === null || eventDataName === undefined
                || currentEventDataName === eventDataName)){
                trace(eventName + " : " + eventDataName);
                eventDate = allEvents[i].dateTime;
                for (var k = sortedEvents.length -1 ; k >= 0; k--){
                   if (sortedEvents[k].date < eventDate){
                       trace("add to bucket number " + i);
                       sortedEvents[k].eventcount = sortedEvents[k].eventcount +1;
                       break;
                  }
              }
            }
        }
        catch(err){
            trace(err.name + ":" + err.message);
        }
    }
    return sortedEvents;
}

// cleanup
function removeExtraBuckets(bucketArray, maxBuckets){
    trace("removeExtraBuckets: bucketArray.length = " + bucketArray.length + " maxBucket = " + maxBuckets);
    var extraSessions = bucketArray.length - maxBuckets;
    if (extraSessions > 0){
        bucketArray.splice(0, extraSessions);
    }
    trace("after splice sessions.length = " + bucketArray.length);
    return bucketArray;
}

//count the events
function countEventsInBuckets (buckets){
trace("countEventsInBuckets");
    var counter = 0;
    for (var j in buckets){
        if (buckets[j] !== undefined ){
            trace("events in session " + j + " = " + buckets[j].eventcount);
            counter = counter +  buckets[j].eventcount;
        }
        else{
            trace("buckets[j] = undefined");
        }
    }
    trace("eventCount = " + counter);
    return counter;
}


