{
	"seasonId": "e77a69a2-0be6-46b1-9faf-f4681692074d",
	"utilities": [
		{
			"lastModified": 1517145083315,
			"name": "utility1",
			"seasonId": "e77a69a2-0be6-46b1-9faf-f4681692074d",
			"stage": "PRODUCTION",
			"type": "MAIN_UTILITY",
			"uniqueId": "39f8cda5-433f-43c0-86bf-c665b6cba569",
			"utility": " \r\nfunction deepFreeze(obj)\r\n{\r\n\tObject.freeze(obj);\r\n\tObject.getOwnPropertyNames(obj).forEach(function (prop)\t{\r\n\t\tif (obj.hasOwnProperty(prop) && obj[prop] !== null\r\n\t\t&& (typeof obj[prop] === \"object\" || typeof obj[prop] === \"function\")\r\n\t\t&& !Object.isFrozen(obj[prop])) {\r\n\t\t\tdeepFreeze(obj[prop]);\r\n\t\t}\r\n\t});\r\n\treturn obj;\r\n};\r\n\r\n\/\/----------------------------------------------------------------------------------\r\n\/\/ this function replaces deepFreeze(), to provide alerts when changes are attempted\r\nfunction create_frozen_object(name, content)\r\n{\r\n\tObject.defineProperty(this, name, {\r\n\t\tvalue: content,\r\n\t\tenumerable: true,\r\n\t\tconfigurable: true\r\n\t});\r\n\r\n\t\/\/ activate alerts in validation mode\r\n\tif (typeof(_validation_mode_) !== \"undefined\")\r\n\t{\r\n\t\tmake_proxy(this, name);\r\n\t}\r\n}\r\n\r\nfunction make_proxy(obj, propName)\r\n{\r\n\tvar attr = Object.getOwnPropertyDescriptor(obj, propName);\r\n\tif (!attr.configurable)\r\n\t\treturn;\r\n\r\n\tvar prop = obj[propName];\r\n\tobj[\"__proxy__\" + propName] = prop;\r\n\t\r\n\tif (typeof prop === \"object\" && prop !== null)\r\n\t{\r\n\t\tvar child_names = Object.getOwnPropertyNames(prop);\r\n\t\tfor (var i = 0; i < child_names.length; ++i)\r\n\t\t{\r\n\t\t\tmake_proxy(prop, child_names[i]);\r\n\t\t}\r\n\t}\r\n\tredefine_property(obj, propName);\r\n}\r\n\r\nfunction redefine_property(obj, nam)\r\n{\r\n\tObject.defineProperty(obj, nam, {\r\n\t\tset: function(val) {  throw \"error: trying to modify frozen context with \" + val;  },\r\n\t\tget: function ()    { return obj[\"__proxy__\" + nam]; }\r\n\t});\r\n}\r\n\/\/---------------------------------------------------------------------------------\r\n\r\nfunction isImperial() {\r\n\treturn context.userPreferences.unitsOfMeasure == \"imperial\";\r\n};\r\nfunction isMetric() {\r\n\treturn context.userPreferences.unitsOfMeasure == \"metric\";\r\n};\r\nfunction isHybrid() {\r\n\treturn context.userPreferences.unitsOfMeasure == \"hybrid\";\r\n};\r\nfunction isCelsius() {\r\n\treturn (isMetric() || isHybrid());\r\n};\r\nfunction isKMH() {\r\n\treturn isMetric();\r\n};\r\n\r\nfunction calcDistance(coords1, coords2) {\r\n\tfunction toRad(x) { return x * Math.PI \/ 180; };\r\n\r\n\tvar lon1 = coords1[0]; var lat1 = coords1[1];\r\n\tvar lon2 = coords2[0]; var lat2 = coords2[1];\r\n\tvar x1 = lat2 - lat1; var dLat = toRad(x1);\r\n\tvar x2 = lon2 - lon1; var dLon = toRad(x2);\r\n\tvar a = Math.sin(dLat \/ 2) * Math.sin(dLat \/ 2) + Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon \/ 2) * Math.sin(dLon \/ 2);\r\n\tvar c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\tvar d = 6371 * c; \/\/ earth radius in km\r\n\r\n\treturn isMetric() ? d : (d \/ 1.60934);\r\n};\r\n\r\nfunction getLengthUnit(){ \/\/ hybrid is cm\r\n\tvar id = isImperial() ? \"Units.Inches\" : \"Units.CM\";\r\n\treturn translate(id);\r\n}\r\n\r\nfunction getVelocityUnit(){ \/\/ hybrid is miles\r\n    var id = isMetric() ? \"Units.KMH\" : \"Units.MPH\" ;\r\n\treturn translate(id);\r\n}\r\n\r\nfunction getTemperatureUnit(){ \/\/ hybrid is C\r\n    return isImperial() ? \"F\" : \"C\";\r\n}\r\n\r\nfunction getPressureUnit(){ \/\/ hybrid is MB\r\n    var id = isImperial() ? \"Units.InchMercury\" : \"Units.MiliBars\" ;\r\n\treturn translate(id);\r\n}\r\n\r\nfunction getDistanceShortUnit(){ \/\/ hybrid is meters\r\n    var id = isImperial() ? \"Units.Feet\" : \"Units.Meter\";\r\n\treturn translate(id);\r\n}\r\n\r\nfunction getDistanceUnit(){ \/\/ hybrid is miles\r\n    var id = isMetric() ? \"Units.KM\"  : \"Units.Miles\" ;\r\n\treturn translate(id);\r\n}\r\n\r\nfunction inMiles(distance)\r\n{\r\n\treturn (isMetric() ? distance * 1.60934 : distance);\r\n};\r\n\r\nfunction inFahrenheit(degrees)\r\n{\r\n\treturn (isCelsius() ? (degrees - 32) \/ 1.8 : degrees);\r\n};\r\n\r\nfunction inMPH(speed)\r\n{\r\n\treturn (isKMH() ? speed * 1.60934 : speed);\r\n};\r\n\r\nfunction inInches(span) \/\/ hybrid is cm\r\n{\r\n\treturn isImperial() ? span : span * 2.54;\r\n};\r\n\r\nfunction translate(stringId)\r\n{\r\n\tvar stringValue = translations[stringId];\r\n\tif (stringValue === undefined) {\r\n\t\tthrow \"missing translation id: \" + stringId;\r\n\t}\r\n\r\n\tif (typeof(_validation_mode_) !== \"undefined\")\r\n\t{\r\n\t\tvar regex = \/\\[\\[\\[(\\d+)\\]\\]\\]\/g;\r\n\t\tvar placeholders = [];\r\n\t\tvar match;\r\n\t\twhile (match = regex.exec(stringValue)) {\r\n\t\t\tplaceholders.push(match[1]);\r\n\t\t}\r\n\r\n\t\tfor (var n = 0; n < placeholders.length; ++n) {\r\n\t\t\tif (placeholders[n] < 1 || placeholders[n] >= arguments.length) {\r\n\t\t\t\tthrow \"translation id: \" + stringId + \" has unmatched placeholder \" + placeholders[n];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfor (var i = 1; i < arguments.length; ++i) {\r\n\t\tstringValue = stringValue.replace( \"[[[\" + i + \"]]]\", arguments[i]);\r\n\t}\r\n\treturn stringValue;\r\n};\r\n\r\n\r\nfunction toDate(dateString) {\r\n\treturn new Date(dateString);\r\n};\r\n\r\nfunction getHours(date){\r\n\treturn parseInt(date.substring(11,13),10);\r\n}\r\n\r\nfunction getMinutes(date){\r\n\treturn parseInt(date.substring(14,16),10);\r\n}\r\n\r\nfunction getTimeStr(date){\r\n\treturn date.substring(11,16);\r\n}\r\n\r\nfunction formatAMPM(d) {\r\n\t\r\n\tif (context.userPreferences.is24HourFormat){\r\n\t\treturn getTimeStr(d);\r\n\t}\r\n\tvar hours = getHours(d); \r\n\tvar minutes = getMinutes(d); \r\n\tvar ampm = hours >= 12 ? translate(\"Units.PM\") : translate(\"Units.AM\");\r\n\r\n\thours = hours % 12; hours = hours ? hours : 12; \/\/ the hour '0' should be '12' \r\n\tminutes = minutes < 10 ? '0'+minutes : minutes;\r\n\r\n    var strTime = formatDigits(hours + ':' + minutes, context.userPreferences.isEasternArabicNumerals);\r\n    if (context.device.localeLanguage == \"ja\" || context.device.localeLanguage.startsWith(\"zh\")){\r\n        strTime = ampm + strTime;\r\n    } else if (context.device.localeLanguage == \"ko\"){\r\n        strTime = ampm + ' ' + strTime;\r\n    } else {\r\n        strTime = strTime + ' ' + ampm;\r\n    }\r\n\treturn strTime; \r\n};\r\n\r\nfunction formatDigits(str, isEasternArabicNumerals){\r\n\r\n    if (!isEasternArabicNumerals) { return str; }\r\n\r\n    var retVal;\r\n    if (typeof str !== 'string') { \r\n        retVal = str.toString();\r\n    } else {\r\n        retVal = str;\r\n    }\r\n    var id = [\"\\u06F0\",\"\\u06F1\",\"\\u06F2\",\"\\u06F3\",\"\\u06F4\",\"\\u06F5\",\"\\u06F6\",\"\\u06F7\",\"\\u06F8\",\"\\u06F9\"];\r\n    return retVal.replace(\/[0-9]\/g, function(w){\r\n        return id[+w];\r\n    });\r\n};\r\n\r\nfunction compareTime (d, str) {\r\n  var hours = getHours(d);\r\n  var minutes = getMinutes(d);\r\n  var target = str.split(\":\");\r\n\r\n  var diff = hours - target[0];\r\n  if (diff != 0)\r\n\treturn (diff < 0) ? -1 : 1;\r\n\r\n  diff = minutes - target[1];\r\n  return (diff == 0) ? 0 : (diff < 0 ? -1 : 1);\r\n};\r\n\r\n\/\/ a more extensible implementation of InMiles(), InFahrenheit() etc.\r\n\/\/ supply size and type of the unit (todo: use an enum object for the unit type instead of a string)\r\nfunction Unit(amount, type)\r\n{\r\n\tswitch (type)\r\n\t{\r\n\tcase \"M\":\r\n\tcase \"miles\":\r\n\t\treturn (isMetric() || isHybrid()) ? amount * 1.60934 : amount;\r\n\r\n\tcase \"KM\":\r\n\tcase \"kilometers\":\r\n\t\treturn (isMetric() ? amount : amount \/ 1.60934);\r\n\r\n\tcase \"MPH\":\r\n\t\treturn (isKMH() ? amount * 1.60934 : amount);\r\n\r\n\tcase \"KMH\":\r\n\t\treturn (isKMH() ? amount : amount \/ 1.60934);\r\n\r\n\tcase \"I\":\r\n\tcase \"inches\":\r\n\t\treturn (isMetric() ? amount * 2.54 : amount);\r\n\r\n\tcase \"CM\":\r\n\tcase \"centimeters\":\r\n\t\treturn (isMetric() || isHybrid()) ? amount : amount \/ 2.54;\r\n\r\n\tcase \"F\":\r\n\tcase \"fahrenheit\":\r\n\t\treturn (isCelsius() ? (amount - 32) \/ 1.8 : amount);\r\n\r\n\tcase \"C\":\r\n\tcase \"celsius\":\r\n\t\treturn (isCelsius() ? amount : (amount * 1.8) + 32);\r\n\r\n\tdefault:\r\n\t\tthrow \"type \" + type + \" is not implemented\" ;\r\n\t}\r\n};\r\n\r\nfunction exists(varName)\r\n{\r\n\ttry {\r\n\t\treturn eval(varName) !== undefined;\r\n\t}\r\n\tcatch(err) {\r\n\t\treturn false;\r\n\t}\r\n};\r\n"
		},
		{
			"lastModified": 1517145083315,
			"name": "utility2",
			"seasonId": "e77a69a2-0be6-46b1-9faf-f4681692074d",
			"stage": "PRODUCTION",
			"type": "STREAMS_UTILITY",
			"uniqueId": "b416b518-a3bc-4ff3-bec2-2fe0bd4b1618",
			"utility": "MAX_ENTERIES_COUNT = 200;\nenteriesArr = Array.apply(undefined,Array(MAX_ENTERIES_COUNT));\nnextIndex = 0;\n\nfunction trace(message) {\n    if (typeof message === \"string\" || message instanceof String) {\n        enteriesArr[nextIndex] = message;\n        if (++nextIndex >= MAX_ENTERIES_COUNT) {\n            nextIndex = 0;\n        }\n    }\n}\n\n__getTrace = function() {\n\n    var outArr = [];\n\n    for (var i = nextIndex ; i < enteriesArr.length ; i++) {\n        var msg = enteriesArr[i]; \n        if (msg != undefined) {\n            outArr.push(msg); \n            enteriesArr[i] = undefined; \n        } \n    }\n\n    for (var j = 0 ; j < nextIndex ; j++) {\n        var msg = enteriesArr[j]; \n        if (msg != undefined) {\n            outArr.push(msg); \n            enteriesArr[j] = undefined;\n        } \n    }\n\n    nextIndex = 0;\n    return outArr;\n}\n\n\/\/ days between date2 to date1\nfunction daysBetween (date1,date2) {\n\n    var one_day=1000*60*60*24;\n    var date1_ms = date1.getTime();\n    var date2_ms = date2.getTime();\n    var difference_ms = date2_ms - date1_ms;\n    return Math.round(difference_ms\/one_day); \n}\n\n\/\/  \nfunction roundEventDateByDay(event) {\n\tvar d = new Date(event.dateTime);\n    var eventDay = new Date(Date.UTC(d.getFullYear(),d.getMonth(),d.getDate())).toJSON();\n    return eventDay;\n}\n\nfunction countByDate(event,keyToCount,dateTable) {\n\n    var eventDay = roundEventDateByDay(event);\n\n    if (dateTable[eventDay] === undefined) {\n\t\tdateTable[eventDay] = {};\n    }\n\n    var dayTable = cache.dateTable[eventDay];\n    \n    if (dayTable[keyToCount] === undefined) {\n\t\tdayTable[keyToCount] = 1;\n\t} else {\n\t\tdayTable[keyToCount] += 1;\n\t}\n\n    dateTable[eventDay] = dayTable;\n}\n\nfunction sumAndCleanLastDays(lastDaysToSum,dateTable) {\n    \n    var now = new Date();\n    var daysArr = Object.keys(dateTable);\n    var daysToRemove = [];\n    var output = {};\n\n    for (var day in daysArr) {\n        var oneDay = daysArr[day];\n        if (daysBetween(new Date(oneDay),now) < lastDaysToSum) {\n            var oneDayVideoSum = dateTable[oneDay];\n            var oneDayVideoSumArr = Object.keys(oneDayVideoSum);\n            for (var c in oneDayVideoSumArr) {\n                var cat = oneDayVideoSumArr[c];\n    \n                if (output[cat] === undefined) {\n                    output[cat] = oneDayVideoSum[cat];\n                } else {\n                    output[cat] += oneDayVideoSum[cat];\n                }\n            }\n        } else {\n            daysToRemove.push(oneDay); \n        }\n    }\n    \n    for (var i in daysToRemove) {\n        delete dateTable[dayToRemove[i]];\n    } \n    \n    return output;\n}\n\n\/\/reset the stream after x days from start date\nfunction resetStreamAfterDays(startDate,resetAfterDaysNum) {\n    \n    var now = new Date();\n    var daysDelta = daysBetween(startDate,now);\n    \n    trace(\"Reset Days After:\" + resetAfterDaysNum  + \"Days delta:\" + daysDelta);\n    \n    if (daysDelta >= resetAfterDaysNum) {\n        trace(\"reset stream\");\n        result = {};\n        cache  = {};\n    }  \n}\n\n\/\/ create the buckets\nfunction createBucketPerSessions(buckets, allEvents){\n    trace(\"createBucketPerSessions\");\n    for (var e in allEvents) {\n        try{\n            if (allEvents[e].name === \"app-launch\"){\n                trace(\"event app launch\");\n                buckets.push({\n                    date: allEvents[e].dateTime,\n                    eventcount: 0\n                });\n            }\n        }\n        catch(err){\n            trace(err.name + \":\" + err.message);\n        }\n    }\n    return buckets\n}\n\n\/\/ sort the events after the buckets\nfunction sortEventsInBuckets(sessionBuckets, allEvents, eventName, eventDataName)\n{\n    trace(\"sortEventsInBuckets\");\n    var sortedEvents = sessionBuckets;\n    for (var i in allEvents) {\n        try{\n            currentEventName = allEvents[i].name;\n            try{\n                if (allEvents[i].eventData.name === undefined){\n                    currentEventDataName = null;\n                }else{\n                    currentEventDataName = allEvents[i].eventData.name;\n                }\n            }catch(err){\n                trace(\"missing eventData.Name :\" + err.name + \":\" + err.message);\n                currentEventDataName = null;\n            }\n            if ((eventName === null || eventName === undefined || currentEventName === eventName) && \n                (currentEventDataName === null || eventDataName === null || eventDataName === undefined\n                || currentEventDataName === eventDataName)){\n                trace(eventName + \" : \" + eventDataName);\n                eventDate = allEvents[i].dateTime;\n                for (var k = sortedEvents.length -1 ; k >= 0; k--){\n                   if (sortedEvents[k].date < eventDate){\n                       trace(\"add to bucket number \" + i);\n                       sortedEvents[k].eventcount = sortedEvents[k].eventcount +1;\n                       break;\n                  }\n              }\n            }\n        }\n        catch(err){\n            trace(err.name + \":\" + err.message);\n        }\n    }\n    return sortedEvents;\n}\n\n\/\/ cleanup\nfunction removeExtraBuckets(bucketArray, maxBuckets){\n    trace(\"removeExtraBuckets: bucketArray.length = \" + bucketArray.length + \" maxBucket = \" + maxBuckets);\n    var extraSessions = bucketArray.length - maxBuckets;\n    if (extraSessions > 0){\n        bucketArray.splice(0, extraSessions);\n    }\n    trace(\"after splice sessions.length = \" + bucketArray.length);\n    return bucketArray;\n}\n\n\/\/count the events\nfunction countEventsInBuckets (buckets){\ntrace(\"countEventsInBuckets\");\n    var counter = 0;\n    for (var j in buckets){\n        if (buckets[j] !== undefined ){\n            trace(\"events in session \" + j + \" = \" + buckets[j].eventcount);\n            counter = counter +  buckets[j].eventcount;\n        }\n        else{\n            trace(\"buckets[j] = undefined\");\n        }\n    }\n    trace(\"eventCount = \" + counter);\n    return counter;\n}\n\n"
		}
	]
}