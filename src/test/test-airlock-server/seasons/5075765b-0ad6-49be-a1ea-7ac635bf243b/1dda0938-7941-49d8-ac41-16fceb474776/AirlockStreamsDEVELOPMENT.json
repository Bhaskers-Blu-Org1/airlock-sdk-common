{
	"seasonId": "1dda0938-7941-49d8-ac41-16fceb474776",
	"streams": [
		{
			"enabled": true,
			"filter": "(event.name === \"detail-viewed\" && \nevent.eventData.name.toLowerCase() === \"go-run\") || \n(event.name === \"app-launch\");",
			"internalUserGroups": [
				"Rachel"
			],
			"minAppVersion": "8.1",
			"name": "GoRunUsage",
			"processor": "MAX_SESSIONS = 30;\nif (cache.sessions === undefined) {\n    trace(\"sessions undefined\");\n    cache.sessions = [];\n}\nelse{\n    trace(\"start with \" + cache.sessions.length + \" events in cache\");\n}\nvar sessions = cache.sessions;\ntrace(\"sessions 1\" + cache.sessions.length + \" events\");\n\/\/ create the buckets\nsessions = createBucketPerSessions(sessions, events);\n\/\/ sort the events after the buckets created\nsessions = sortEventsInBuckets(\"detail-viewed\", \"go-run\", sessions, events);\n\/\/cleanup\nsessions = removeExtraBuckets(sessions, MAX_SESSIONS); \n\/\/count\nvar eventsCount = countEventsInBuckets(sessions);\n\n\/\/ update cache\ntrace(\"update cache\");\ncache.sessions = sessions\n\n\/\/update result\ntrace(\"update result\");\nresult.count = eventsCount;\nif (eventsCount === 0){\n    result.label = \"go-run-none\";\n}else if (eventsCount  <= 3){\n    result.label = \"go-run-occasional\";\n}else{\n    result.label = \"go-run-heavy\";\n}\n\n\n\/\/------------------ FUNCTIONS ----------------------\n\n\/\/ create the buckets\nfunction createBucketPerSessions(buckets, allEvents){\n    trace(\"createBucketPerSessions\");\n    for (var e in allEvents) {\n        try{\n            if (allEvents[e].name === \"app-launch\"){\n                trace(\"event app launch\");\n                buckets.push({\n                    date: allEvents[e].dateTime,\n                    eventcount: 0\n                });\n            }\n        }\n        catch(err){\n            trace(\"error when reading event\");\n        }\n    }\n    return buckets\n}\n\n\/\/ sort the events after the buckets created\nfunction sortEventsInBuckets(eventName, eventDataName, sessionBuckets, allEvents)\n{\n    trace(\"sortDetailViewdEvents\");\n    var sortedEvents = sessionBuckets;\n    for (var i in allEvents) {\n        try{\n            currentEventName = allEvents[i].name.toLowerCase();\n            currentEventDataName = allEvents[i].eventData.name.toLowerCase()\n            if ((eventName === null || eventName === undefined || currentEventName === eventName) && \n                (eventDataName === null || eventDataName === undefined|| currentEventDataName === eventDataName)){\n                trace(eventName + \" : \" + eventDataName);\n                eventDate = allEvents[i].dateTime;\n                for (var k = sortedEvents.length -1 ; k >= 0; k--){\n                   if (sortedEvents[k].date < eventDate){\n                       trace(\"add to bucket number \" + i);\n                       sortedEvents[k].eventcount = sortedEvents[k].eventcount +1;\n                       break;\n                  }\n              }\n            }\n        }\n        catch(err){\n            trace(\"error when reading event\");\n        }\n    }\n    return sortedEvents;\n}\n\n\/\/ cleanup\nfunction removeExtraBuckets(bucketArray, maxBuckets){\n    trace(\"removeExtraBuckets: bucketArray.length = \" + bucketArray.length + \" maxBucket = \" + maxBuckets);\n    var extraSessions = bucketArray.length - maxBuckets;\n    trace(\"extraSessions = \" + extraSessions);\n    if (extraSessions > 0){\n        bucketArray.splice(0, extraSessions);\n    }\n    trace(\"after splice sessions.length = \" + bucketArray.length);\n    return bucketArray;\n}\n\n\/\/count the events\nfunction countEventsInBuckets (buckets){\ntrace(\"countEventsInBuckets\");\n    var counter = 0;\n    for (var j in buckets){\n        if (buckets[j] !== undefined ){\n            trace(\"events in session \" + j + \" = \" + buckets[j].eventcount);\n            counter = counter +  buckets[j].eventcount;\n        }\n        else{\n            trace(\"buckets[j] = undefined\");\n        }\n    }\n    trace(\"eventCount = \" + counter);\n    return counter;\n}",
			"queueSizeKB": 1024,
			"rolloutPercentage": 100.0,
			"seasonId": "1dda0938-7941-49d8-ac41-16fceb474776",
			"stage": "DEVELOPMENT",
			"uniqueId": "e45f5f0a-0e32-4412-8a10-d2e0f47342f5"
		},
		{
			"enabled": true,
			"filter": "(event.name === \"detail-viewed\" && \nevent.eventData.name.toLowerCase() === \"allergy\") || \n(event.name === \"app-launch\");",
			"internalUserGroups": [
				"Rachel"
			],
			"minAppVersion": "8.1",
			"name": "AllergyUsage",
			"processor": "MAX_SESSIONS = 30;\nif (cache.sessions === undefined) {\n    trace(\"sessions undefined\");\n    cache.sessions = [];\n}\nelse{\n    trace(\"start with \" + cache.sessions.length + \" events in cache\");\n}\nvar sessions = cache.sessions;\ntrace(\"sessions 1\" + cache.sessions.length + \" events\");\n\/\/ create the buckets\nsessions = createBucketPerSessions(sessions, events);\n\/\/ sort the events after the buckets created\nsessions = sortDetailViewdEvents(\"allergy\", sessions, events);\n\/\/cleanup\nsessions = removeExtraBuckets(sessions, MAX_SESSIONS); \n\/\/count\nvar eventsCount = countEventsInBuckets(sessions);\n\n\/\/ update cache\ntrace(\"update cache\");\ncache.sessions = sessions\n\n\/\/update result\ntrace(\"update result\");\nresult.count = eventsCount;\nif (eventsCount === 0){\n    result.label = \"allergy-none\";\n}else if (eventsCount  <= 3){\n    result.label = \"allergy-occasional\";\n}else{\n    result.label = \"allergy-heavy\";\n}\n\n\n\/\/------------------ FUNCTIONS ----------------------\n\n\/\/ create the buckets\nfunction createBucketPerSessions(buckets, allEvents){\n    trace(\"createBucketPerSessions\");\n    for (var e in allEvents) {\n        if (allEvents[e].name === \"app-launch\"){\n            trace(\"event app launch\");\n            buckets.push({\n                date: allEvents[e].dateTime,\n                eventcount: 0\n            });\n        }  \n    }\n    return buckets\n}\n\n\/\/ sort the events after the buckets created\nfunction sortDetailViewdEvents(eventDataName, sessionBuckets, allEvents)\n{\n    trace(\"sortDetailViewdEvents\");\n    var sortedEvents = sessionBuckets;\n    for (var i in allEvents) {\n        if (allEvents[i].name === \"detail-viewed\" && allEvents[i].eventData.name.toLowerCase() === eventDataName){\n            trace(\"detail-viewed\");\n            eventDate = allEvents[i].dateTime;\n            for (var i = sortedEvents.length -1 ; i >= 0; i--){\n               if (sortedEvents[i].date < eventDate){\n                   trace(\"add to bucket number \" + i);\n                   sortedEvents[i].eventcount = sortedEvents[i].eventcount +1;\n                   break;\n              }\n          }\n        }\n    }\n    return sortedEvents;\n}\n\n\/\/ cleanup\nfunction removeExtraBuckets(bucketArray, maxBuckets){\n    trace(\"removeExtraBuckets: bucketArray.length = \" + bucketArray.length + \" maxBucket = \" + maxBuckets);\n    var extraSessions = bucketArray.length - maxBuckets;\n    trace(\"extraSessions = \" + extraSessions);\n    if (extraSessions > 0){\n        for (i = 1; i <= extraSessions; i++){\n            trace(\"remove elements\");\n            bucketArray.shift();\n        }\n    }\n    trace(\"after shift sessions.length = \" + bucketArray.length);\n    return bucketArray;\n}\n\n\/\/count the events\nfunction countEventsInBuckets (buckets){\ntrace(\"countEventsInBuckets\");\n    var counter = 0;\n    for (var j in buckets){\n        if (buckets[j] !== undefined ){\n            trace(\"events in session \" + j + \" = \" + buckets[j].eventcount);\n            counter = counter +  buckets[j].eventcount;\n        }\n        else{\n            trace(\"buckets[j] = undefined\");\n        }\n    }\n    trace(\"eventCount = \" + counter);\n    return counter;\n}\n",
			"queueSizeKB": 1024,
			"rolloutPercentage": 100.0,
			"seasonId": "1dda0938-7941-49d8-ac41-16fceb474776",
			"stage": "DEVELOPMENT",
			"uniqueId": "6568174c-f224-40d2-986b-fcb3d70d4f06"
		},
		{
			"enabled": true,
			"filter": "(event.name === \"app-launch\");",
			"internalUserGroups": [
				"Rachel"
			],
			"minAppVersion": "8.1",
			"name": "ActiveDaysCount",
			"processor": "if (cache.lastEpoch === undefined){\n    cache.lastEpoch = new Date(0);\n}\nif (cache.activeDays === undefined){\n    cache.activeDays = 0;\n}\n\nvar lastDate;\nvar lastYear;\nvar lastMonth;\nvar lastDay;\n\/\/FOR DEBUG\nvar lastMinutes;\n\nupdateLastDate (cache.lastEpoch);\ntrace(\"lastDate = \" + cache.lastEpoch + \"lastYear = \" + lastYear + \" lastMonth \" +\n    lastMonth + \" lastDay \" +lastDay + \" lastMin \" + lastMinutes);\n\nfor (var e in events){\n    if (events[e].name === \"app-launch\"){\n        currentDate = new Date(events[e].dateTime);\n        trace(\"currentDate = \" + currentDate + \"Year = \" + currentDate.getFullYear() + \" Month \" +\n            currentDate.getMonth() + \" Day \" +currentDate.getDate() + \" minute = \" + currentDate.getMinutes());\n        if (currentDate.getDate() != lastDay || currentDate.getMonth() != lastMonth || \n        currentDate.getFullYear() != lastYear\n        \/\/ || currentDate.getMinutes() !== lastMinutes\n        ){\n            trace(\"newDay\");\n            cache.activeDays = cache.activeDays + 1;\n            updateLastDate(events[e].dateTime);\n        }\n        else{\n            trace(\"same day\");\n        }\n    }\n}\n\n\/\/update result\nresult.activeDays = cache.activeDays;\n\nfunction updateLastDate(dateInMs){\n    cache.lastEpoch = dateInMs;\n     lastDate  = new Date(dateInMs);\n     lastYear  = lastDate.getFullYear();\n     lastMonth = lastDate.getMonth();\n     lastDay   = lastDate.getDate();\n    \/\/FOR DEBUG\n     lastMinutes   = lastDate.getMinutes();\n}\n",
			"queueSizeKB": 1024,
			"rolloutPercentage": 100.0,
			"seasonId": "1dda0938-7941-49d8-ac41-16fceb474776",
			"stage": "DEVELOPMENT",
			"uniqueId": "31656a79-8914-4fa5-b9bd-8b86e3bfa836"
		},
		{
			"enabled": true,
			"filter": "true",
			"internalUserGroups": [
				"Rachel"
			],
			"minAppVersion": "8.1",
			"name": "User Initiated Video Usage",
			"processor": "MAX_SESSIONS = 30;\nEVENT_NAME = \"video-played\";\nif (cache.sessions === undefined) {\n    trace(\"sessions undefined\");\n    cache.sessions = [];\n}\nelse{\n    trace(\"start with \" + cache.sessions.length + \" events in cache\");\n}\nvar sessions = cache.sessions;\ntrace(\"sessions 1\" + cache.sessions.length + \" events\");\n\/\/ create the buckets\nsessions = createBucketPerSessions(sessions, events);\n\/\/ sort the events after the buckets created\nsessions = sortDetailViewdEvents(EVENT_NAME, sessions, events);\n\/\/cleanup\nsessions = removeExtraBuckets(sessions, MAX_SESSIONS); \n\/\/count\nvar eventsCount = countEventsInBuckets(sessions);\n\n\/\/ update cache\ntrace(\"update cache\");\ncache.sessions = sessions\n\n\/\/update result\ntrace(\"update result\");\nresult.count = eventsCount;\nif (eventsCount === 0){\n    result.label = \"video-none\";\n}else if (eventsCount  <= 3){\n    result.label = \"video-occasional\";\n}else{\n    result.label = \"video-heavy\";\n}\n\n\n\/\/------------------ FUNCTIONS ----------------------\n\n\/\/ create the buckets\nfunction createBucketPerSessions(buckets, allEvents){\n    trace(\"createBucketPerSessions\");\n    for (var e in allEvents) {\n        if (allEvents[e].name === \"app-launch\"){\n            trace(\"event app launch\");\n            buckets.push({\n                date: allEvents[e].dateTime,\n                eventcount: 0\n            });\n        }  \n    }\n    return buckets\n}\n\n\/\/ sort the events after the buckets created\nfunction sortDetailViewdEvents(eventDataName, sessionBuckets, allEvents)\n{\n    trace(\"sortDetailViewdEvents\");\n    var sortedEvents = sessionBuckets;\n    for (var i in allEvents) {\n        if (allEvents[i].name === \"detail-viewed\" && allEvents[i].eventData.name.toLowerCase() === eventDataName){\n            trace(\" go-run\");\n            eventDate = allEvents[i].dateTime;\n            for (var i = sortedEvents.length -1 ; i >= 0; i--){\n               if (sortedEvents[i].date < eventDate){\n                   trace(\"add to bucket number \" + i);\n                   sortedEvents[i].eventcount = sortedEvents[i].eventcount +1;\n                   break;\n              }\n          }\n        }\n    }\n    return sortedEvents;\n}\n\n\/\/ cleanup\nfunction removeExtraBuckets(bucketArray, maxBuckets){\n    trace(\"removeExtraBuckets: bucketArray.length = \" + bucketArray.length + \" maxBucket = \" + maxBuckets);\n    var extraSessions = bucketArray.length - maxBuckets;\n    trace(\"extraSessions = \" + extraSessions);\n    if (extraSessions > 0){\n        for (i = 1; i <= extraSessions; i++){\n            trace(\"remove elements\");\n            bucketArray.shift();\n        }\n    }\n    trace(\"after shift sessions.length = \" + bucketArray.length);\n    return bucketArray;\n}\n\n\/\/count the events\nfunction countEventsInBuckets (buckets){\ntrace(\"countEventsInBuckets\");\n    var counter = 0;\n    for (var j in buckets){\n        if (buckets[j] !== undefined ){\n            trace(\"events in session \" + j + \" = \" + buckets[j].eventcount);\n            counter = counter +  buckets[j].eventcount;\n        }\n        else{\n            trace(\"buckets[j] = undefined\");\n        }\n    }\n    trace(\"eventCount = \" + counter);\n    return counter;\n}\n",
			"queueSizeKB": 1024,
			"rolloutPercentage": 100.0,
			"seasonId": "1dda0938-7941-49d8-ac41-16fceb474776",
			"stage": "DEVELOPMENT",
			"uniqueId": "22684fc5-e7b3-46d3-b6ff-0adf08cc3fc9"
		}
	]
}